#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import ConfigParser
import errno
import os
import subprocess
import sys

CONFIG_FILE = '~/.res_check_freeze-buildh-config'
SHELL = 'sh'


def main():
    parsed_args = parse_args()

    config_filename = os.path.expanduser(CONFIG_FILE)
    try:
        config = read_config(config_filename)
    except IOError as e:
        if e.errno == errno.ENOENT:
            print >>sys.stderr, 'error: need config file {!r}'.format(config_filename)
            print >>sys.stderr, 'Example:\n'
            print >>sys.stderr, '[default]'
            print >>sys.stderr, 'host = skaro-dev-1'
            print >>sys.stderr, 'directory = res_check_freeze'
            raise SystemExit(1)
        else:
            raise

    profile = dict(config.items(parsed_args.profile))

    command_name = 'command_{}'.format(parsed_args.command)
    command_fun = globals()[command_name]
    command_fun(profile)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--profile', default='default',
                        help='profile to use')
    parser.add_argument('command', choices=['make', 'makei'],
                        help='command to execute')
    return parser.parse_args()


def read_config(config_filename):
    config = ConfigParser.RawConfigParser()
    with open(config_filename) as fobj:
        config.readfp(fobj)
    return config


def command_make(profile):
    local_script = _build_rsync_script(profile['host'], profile['directory'])
    _exec_local_script(local_script)

    remote_script = []
    remote_script.append(_build_cd_script(profile['directory']))
    remote_script.append(_build_make_script())
    _exec_remote_script('\n'.join(remote_script), profile['host'])


def command_makei(profile):
    local_script = _build_rsync_script(profile['host'], profile['directory'])
    _exec_local_script(local_script)

    remote_script = []
    remote_script.append(_build_cd_script(profile['directory']))
    remote_script.append(_build_make_script())
    remote_script.append('/etc/init.d/asterisk stop')
    remote_script.append('make install')
    remote_script.append('/etc/init.d/asterisk start')
    _exec_remote_script('\n'.join(remote_script), profile['host'])


def _build_cd_script(directory):
    return "cd '{}'".format(directory)


def _build_make_script():
    # version = subprocess.check_output(['git', 'describe']).rstrip()
    # return 'make VERSION={}'.format(version)
    return 'make VERSION=0.0.1'


def _build_rsync_script(host, directory):
    return '''
rsync -v -rlp \
    --include '*.c' \
    --include '*.h' \
    --include /Makefile \
    --exclude '*' \
    . {host}:{directory}
'''.format(host=host, directory=directory)


def _exec_local_script(script):
    _exec_command([SHELL, '-e'], script)


def _exec_remote_script(script, host):
    _exec_command(['ssh', '-l', 'root', host, SHELL, '-e'], script)


def _exec_command(args, process_input):
    p = subprocess.Popen(args, stdin=subprocess.PIPE)
    p.communicate(process_input)
    if p.returncode:
        print >>sys.stderr, 'command {} returned non-zero status code: {}'.format(args, p.returncode)


if __name__ == '__main__':
    main()
